import os
import serial
import time
import json
import subprocess
import threading 
import sys

#initialize two counts
count1=0
count2=0

#default host address
host = "DDDD"

#Initialize serial port
ser = serial.Serial('/dev/ttyS0',115200,timeout=1)

#grab the ble address and store
ser.write("p\n\r")
ble_address=ser.read(4)
file = open("/home/pi/tf_inference/serialaddress.txt", "w")
file.write(ble_address)
file.close()

#function to grab the host address
def host_function():
    hostaddress = open("/home/pi/tf_inference/hostaddress.txt", "r")
    host=hostaddress.read()
    if(len(host)!=4):
        file = open("/home/pi/tf_inference/hostaddress.txt", "w")
        file.write("DDDD")
        file.close()
        hostaddress = open("/home/pi/tf_inference/hostaddress.txt", "r")
        host = hostaddress.read()
    host=str(host[0]+host[1]+host[2]+host[3])
    hostaddress.close()
    return host

#call host function
host=host_function()

#this function will run every minute
def send_everymin():
    threading.Timer(60.0,send_everymin).start()
    host=host_function()
    file = open("/home/pi/tf_inference/num.txt","r")
    file2=file.read()
    data2=(json.loads(file2))
    count1=data2[-2]
    count2=data2[-1]
    if(len(str(data2[-2]))<2):
        count1=str(data2[-2]).zfill(2)
    if(len(str(data2[-1]))<2):
        count2=str(data2[-1]).zfill(2)
    ser.write("D " + host + " " + str(ble_address) + str(count1)+str(count2) + "\n")

          #check number of files and delete if it exceeds 1440 | 48 hours
    mycmd=subprocess.check_output('ls /home/pi/tf_inference/static/processedImages* | wc -l',shell=True)
    file = open("/home/pi/tf_inference/imagecount2.txt","w")
    mycmd2=str(mycmd)
    file.write(mycmd2)
    file.close()
    if(int(mycmd)>1440):
        os.system('rm ' + '/home/pi/tf_inference/static/processedImages/*')

#function to measure temperature
def measure_temp():
    temp = os.popen("vcgencmd measure_temp").readline()
    return (temp.replace("temp=",""))

#function to send data every minute
send_everymin()

while True:
    data=ser.readline() 
        #print(data) 
        #return the current two count values
    if(data=="ADGPCNT\n"):
	    file = open("/home/pi/tf_inference/num.txt", "r") 
	    file2=file.read()
	    data2=(json.loads(file2))
	    count1=data2[-2]
	    count2=data2[-1]
    if(len(str(data2[-2]))<2):
	    count1=str(data2[-2]).zfill(2)
    if(len(str(data2[-1]))<2):
        count2=str(data2[-1]).zfill(2)
        ser.write("D "+host+" " + str(ble_address) + str(count1)+str(count2) + "\n")     # write a string
        #return address and device type        
    elif(data[:3]=="ADH"):
	    file = open("/home/pi/tf_inference/flag.txt", "r")
        filem=file.read()
	    file.close()
    if(filem=="0"):
        file = open("/home/pi/tf_inference/hostaddress.txt", "w")
        file.write(data[3:].rstrip())
        host = str(data[3:].rstrip())
        file.close()
	    ser.write("D "+host+" " + str(ble_address) + "5" + "\n")
        #return the current temperature value
    elif(data=="ADGTEMP\n"):
	    temperature1=str(measure_temp())
	    temperature2=temperature1[0]+temperature1[1]
	    ser.write("D "+host+" "+ str(ble_address) + temperature2 + "\n")
	#initialize the data file to [0,0] num.txt
    elif(data=="ADDCLEAR\n"):
	    file = open("/home/pi/tf_inference/num.txt", "w")
	    file.write("[0,0]")
	    file.close()
        ser.write("D "+host+" "+ str(ble_address) + "CLEAR" + "\n")     # write a string
	#force clear stored images 
    elif(data=="ADICLEAR\n"):
        os.system('rm ' + '/home/pi/tf_inference/static/processedImages/*')
	    ser.write("D "+host+" "+ str(ble_address) + "CLEAR" + "\n")
	#return the available free space on SD card
    elif(data=="ADGETSZ\n"):
	    mycmd=subprocess.check_output('df -h | head -2',shell=True)
	    mycmd=mycmd.split()
	    ser.write("D "+host+" "+ str(ble_address) + str(mycmd[10]) + "\n")
	#remove data logs demofile.txt
    elif(data=="ADRMDB\n"):
	    file = open("/home/pi/tf_inference/demofile.txt", "w")
	    file.write("")
	    file.close()
	    ser.write("D "+host+" "+ str(ble_address) + "CLEAR" + "\n")
	#reboot device
    elif(data=="ADRSTRT\n"):
	    ser.write("D "+host+" "+ str(ble_address) + "REBT" + "\n")
	    os.system('sudo ' + 'reboot')
         #remove serial.log and cam.log generated by crontab
    elif(data=="ADRMCLOG\n"):
        file = open("/home/pi/tf_inference/serial.log", "w")
        file.write("")
        file.close()
        file = open("/home/pi/tf_inference/cam.log", "w")
        file.write("")
        file.close()
        file = open("/home/pi/tf_inference/app.log", "w")
        file.write("")
        file.close()
        ser.write("D "+host+" "+ str(ble_address) + "CLEAR" + "\n")
        #send the uptime
    elif(data=="ADGUPTM\n"):
        mycmd=subprocess.check_output("awk '{print $0/60;}' /proc/uptime",shell=True)
        ser.write("D "+host+" "+ str(ble_address) + str((int(round(float(mycmd))))) + "\n")
    elif(data=="ADRSSER\n"):
        ser.write("D "+host+" "+ str(ble_address) + "CLOSE" + "\n")
	    cmd = "ps -aef | grep se.py | awk '{print $2}' | sudo xargs kill -9"
        subprocess.Popen(cmd, shell=True)
	#individually set host address
    elif(data[:3]=="ADS"):
        file = open("/home/pi/tf_inference/hostaddress.txt", "w")
        file.write(data[3:].rstrip())
        host = str(data[3:].rstrip())
        file.close()
        ser.write("D "+ host +" " + str(ble_address) + "5" + "\n")
	#flag will reset the commissioning flag
    elif(data=="ADCMRST\n"):
	    file = open("/home/pi/tf_inference/flag.txt", "w")
	    file.write("0")
	    file.close()
	    ser.write("D "+host+" " + str(ble_address)+ "FLGRS" + "\n")
	#flag to set commissioning flag
    elif(data=="ADCMSET\n"):
	    file = open("/home/pi/tf_inference/flag.txt", "w")
        file.write("1")
        file.close()
        ser.write("D "+host+" " + str(ble_address)+ "FLGST" + "\n")
ser.close()

